#BlueJ class context
comment0.target=Location
comment0.text=\r\n\ The\ class\ Location\ is\ for\ the\ location\ of\ a\ storage\ facility.\ It\ has\ a\ name\ for\ the\ location\ and\r\n\ has\ methods\ to\ manipulate\ arrays\ storing\ information\ abount\ the\ units\ at\ the\ location\ and\ the\ customers.\r\n\r\n\ @author\ Valerie\ Foster\r\n\ @version\ 1/9/2018\r\n
comment1.params=name
comment1.target=Location(java.lang.String)
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ Location\r\n\ \r\n\ @param\ \ \ name\ \ \ \ the\ name\ to\ identify\ the\ location\ (PRECONDITION\ -\ the\ name\ must\ be\ of\ the\ format\ two\ uppercase\ letters,\ two\ numbers,\ then\ a\ name)\r\n
comment10.params=
comment10.target=void\ chargeRent()
comment10.text=\r\n\ This\ method\ loops\ through\ the\ cutomer\ array\ and\ uses\ the\ getUnitForCust\ method\ to\ charge\ every\ customer\ for\ all\ of\ the\ units\ they\ rent\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment2.params=
comment2.target=java.lang.String\ getName()
comment2.text=\r\n\ An\ accessor\ -\ returns\ the\ location's\ identifier\r\n
comment3.params=row\ col
comment3.target=Unit\ getUnit(int,\ int)
comment3.text=\r\n\ This\ method\ returns\ a\ unit\ at\ the\ point\ of\ the\ given\ indexes\r\n\r\n\ @param\ \ \ row,\ col\ \ \ \ two\ integer\ indexes\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ a\ unit\r\n
comment4.params=ind
comment4.target=Customer\ getCust(int)
comment4.text=\r\n\ This\ method\ returns\ a\ customer\ at\ the\ given\ index\r\n\r\n\ @param\ \ \ ind\ \ \ \ \ an\ index\r\n\ @return\ \ \ \ \ \ \ \ \ \ a\ customer\r\n
comment5.params=
comment5.target=int\ getCustCount()
comment5.text=\r\n\ Returns\ how\ many\ cutomers\ there\ are\ at\ this\ location\ by\ looping\ through\ the\ array\ to\ count\ how\ many\ no-null\ values\ there\ are\r\n
comment6.params=newCust
comment6.target=void\ addCust(Customer)
comment6.text=\r\n\ Adds\ a\ customer\ to\ the\ customer\ array\ by\ looping\ through\ and\ adding\ the\ value\ to\ the\ first\ null\ spot\ it\ finds\r\n\r\n\ @param\ \ \ newCust\ \ \ \ \ a\ customer\ to\ add\r\n
comment7.params=cust
comment7.target=Unit[]\ getUnitForCust(Customer)
comment7.text=\r\n\ Creates\ an\ array\ of\ units\ rented\ to\ the\ given\ customer\ by\ looping\ through\ the\ units\ and\ finding\ the\ total\ number\ of\ units\ \r\n\ rented\ to\ the\ given\ customer,\ generating\ an\ array\ of\ that\ size,\ then\ filling\ it\ with\ all\ the\ units\ for\ that\ customer\r\n\r\n\ @param\ \ \ cust\ \ \ \ a\ customer\ of\ the\ location\r\n\ @return\ \ \ \ \ \ \ \ \ \ an\ array\ of\ rented\ units\r\n
comment8.params=
comment8.target=Unit[]\ getEmptyUnits()
comment8.text=\r\n\ Creates\ an\ array\ with\ units\ that\ are\ not\ rented\ to\ anyone\ by\ looping\ through\ the\ units\ and\ finding\ the\ total\ number\ of\ units\r\n\ that\ aren't\ rented\ to\ anyone,\ generating\ an\ array\ of\ that\ size,\ then\ filling\ it\ with\ all\ the\ unrented\ units\r\n\r\n\ @return\ \ \ \ an\ array\ of\ unrented\ units\r\n
comment9.params=type
comment9.target=Unit[]\ getTypeEmptyUnits(UnitType)
comment9.text=\r\n\ Creates\ an\ array\ of\ units\ of\ a\ certain\ type\ that\ aren't\ rented\ to\ anyone\ by\ looping\ through\ the\ units\ and\ finding\ the\ total\ number\ of\ units\r\n\ of\ the\ given\ type\ that\ aren't\ rented\ to\ anyone,\ generating\ an\ array\ of\ that\ size,\ then\ filling\ it\ with\ all\ the\ unrented\ units\ of\ that\ type\r\n\r\n\ @param\ \ \ type\ \ \ \ a\ type\ of\ unit\r\n\ @return\ \ \ \ \ \ \ \ \ \ an\ array\ of\ unrented\ units\ of\ the\ given\ type\r\n
numComments=12
